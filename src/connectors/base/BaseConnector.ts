export interface ServiceConfig {\n  id: string;\n  name: string;\n  type: string; // llm | image | automation | vector\n  url: string;\n  apiKey?: string;\n}\n\nexport interface IConnector<T = unknown> {\n  readonly id: string;\n  readonly config: ServiceConfig;\n  connect(): Promise<boolean>;\n  disconnect(): Promise<void>;\n  isConnected(): boolean;\n  checkStatus(): Promise<{ isOnline: boolean; error?: string; details?: T }>;\n}\n\nexport abstract class BaseConnector<T = unknown> implements IConnector<T> {\n  public readonly id: string;\n  public config: ServiceConfig;\n  protected connected = false;\n\n  constructor(config: ServiceConfig) {\n    this.id = config.id;\n    this.config = { ...config };\n  }\n\n  public abstract connect(): Promise<boolean>;\n  public abstract disconnect(): Promise<void>;\n  public abstract checkStatus(): Promise<{ isOnline: boolean; error?: string; details?: T }>;\n  public isConnected(): boolean {\n    return this.connected;\n  }\n}\n