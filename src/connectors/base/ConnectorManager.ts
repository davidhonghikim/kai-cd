import { BaseConnector, ServiceConfig, IConnector } from "./BaseConnector";\n\nexport class ConnectorManager {\n  private static _instance: ConnectorManager;\n  private cache = new Map<string, IConnector>();\n\n  public static getInstance(): ConnectorManager {\n    if (!this._instance) {\n      this._instance = new ConnectorManager();\n    }\n    return this._instance;\n  }\n\n  async getConnector<T extends IConnector = IConnector>(config: ServiceConfig): Promise<T> {\n    if (this.cache.has(config.id)) {\n      return this.cache.get(config.id) as T;\n    }\n    // Dynamic import by type to keep bundle slim\n    let module;\n    switch (config.type) {\n      case "llm":\n        module = await import("../llm/openAIConnector");\n        break;\n      default:\n        throw new Error(`Unsupported connector type: ${config.type}`);\n    }\n    const ConnectorClass = module.default;\n    const connector: IConnector = new ConnectorClass(config);\n    this.cache.set(config.id, connector);\n    return connector as T;\n  }\n\n  remove(id: string) {\n    const conn = this.cache.get(id);\n    if (conn) {\n      conn.disconnect().catch(() => {});\n      this.cache.delete(id);\n    }\n  }\n}\n